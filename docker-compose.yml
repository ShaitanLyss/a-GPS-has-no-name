version: "3"

services:
  ## service zookeeper
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-net
    restart: unless-stopped

  ## service kafka
  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_MODE=raft
      - KAFKA_CFG_ZOOKEEPER_METADATA_MIGRATION_ENABLE=true
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_MESSAGE_MAX_BYTES=10000000
    healthcheck:
      test:
        ["CMD", "kafka-topics.sh", "--bootstrap-server=kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - kafka-net
    depends_on:
      - zookeeper
    restart: unless-stopped

  ## Init-container to create the topic coordinates
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: init-kafka
    working_dir: /opt/bitnami/kafka/bin
    networks:
      - kafka-net
    entrypoint: ["/bin/sh", "-c"]
    depends_on:
      - kafka
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic coordinates --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
  

  #### Service Postgres Database
  postgres:
    image: docker.io/library/postgres
    container_name: postgres
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    networks:
      - kafka-net
    restart: on-failure

  postgis:
    image: postgis/postgis:latest
    container_name: postgis
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    depends_on:
      - postgres
    networks:
      - kafka-net
    restart: on-failure

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    ports:
      - "8081:80"
    depends_on:
      - kafka
    networks:
      - kafka-net
    restart: on-failure

  producer_1:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer_1
    ports:
      - "8082:80"
    depends_on:
      - kafka
    networks:
      - kafka-net
    restart: on-failure

  producer_2:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer_2
    ports:
      - "8083:80"
    depends_on:
      - kafka
    networks:
      - kafka-net
    restart: on-failure

  fastapi:
    build:
      context: ./FastApi
      dockerfile: Dockerfile
    container_name: fastapi
    depends_on:
      - postgres
      - postgis
    ports:
      - "4000:8000"
    networks:
      - kafka-net
    restart: on-failure
  front:
     build:
      context: ./frontend
      dockerfile: Dockerfile
     container_name: front
     depends_on:
      - fastapi
     ports:
      - "5173:5173"
     networks:
      - kafka-net
     restart: on-failure

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  kafka-net:
    driver: bridge
