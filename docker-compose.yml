version: "3"

services:
  kafka:
    image: docker.io/bitnami/kafka:3.6
    ports:
      - 9092:9092
      - 9094:9094
    # volumes:
    #   - kafka_data:/bitnami
    restart: on-failure
    environment:
      - KAFKA_CFG_MODE=raft
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test:
        ["CMD", "kafka-topics.sh", "--bootstrap-server=kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3

  ## Init-container to create the topic coordinates
  init-kafka:
    image: docker.io/confluentinc/cp-kafka:6.1.1
    working_dir: /opt/bitnami/kafka/bin
    entrypoint: ["/bin/sh", "-c"]
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic coordinates --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
  
  postgis:
    image: docker.io/postgis/postgis:latest
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}

  consumer:
    build: consumer
    image: noname-gps-consumer
    ports:
      - "8081:80"
    depends_on:
      init-kafka:
        condition: service_completed_successfully
      postgis:
        condition: service_healthy
    environment:
      - KAFKA_BROKER_ADDRESS=kafka:9092
      - TOPIC=coordinates
      - PG_USER=${POSTGRES_USER}
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - PG_DATABASE=${POSTGRES_DB_NAME}
      - PG_HOST=postgis
      - KAFKA_CONSUMER_GROUP=coordinates-consumer

  producer_1:
    build: producer
    image: noname-gps-producer
    ports:
      - "8082:80"
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    environment:
      - KAFKA_BROKER_ADDRESS=kafka:9092
      - TOPIC=coordinates

  producer_2:
    build: producer
    image: noname-gps-producer
    ports:
      - "8083:80"
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    restart: on-failure
    environment:
      - KAFKA_BROKER_ADDRESS=kafka:9092
      - TOPIC=coordinates

  backend:
    build: backend
    image: noname-gps-backend
    depends_on:
      postgis:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - PG_USER=${POSTGRES_USER}
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - PG_DATABASE=${POSTGRES_DB_NAME}
      - PG_HOST=postgis
  front:
     build: frontend
     image: noname-gps-frontend
     depends_on:
      - backend
     ports:
      - "3000:3000"
     environment:
      - PUBLIC_BACKEND_ADDRESS=http://localhost:8000


# volumes:
  # kafka_data:
